@page "/login"
@using RestauranteApp.Client.Autorizacion

@inject HttpClient HttpClient
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IToastService ToastService



    <div class="contenedor">

        <div class="screen">
            <div class="screen__content">
                <EditForm Model="@LoginDtoRequest" class="login" OnValidSubmit="ValidLogin">
                    <DataAnnotationsValidator />
                    <div class="login__field">
                    <i class="login__icon bi bi-person-circle"></i>
                        <input type="text" class="login__input" @bind-value="LoginDtoRequest.Usuario" placeholder="Usuario">
                        <ValidationMessage For="() => LoginDtoRequest.Usuario" />
                    </div>
                    <div class="login__field">
                    <i class="login__icon bi bi-lock-fill"></i>
                        <input type="password" class="login__input" @bind-value="LoginDtoRequest.Password" placeholder="Password">
                    </div>
                    <button class="button login__submit" type="submit">
                        <span class="button__text">Iniciar sesión ahora</span>
                        <i class="button__icon fas fa-chevron-right"></i>
                    </button>
                </EditForm>

            </div>
            <div class="fondosPantalla">
                <span class="screen__background__shape screen__background__shape4"></span>
                <span class="screen__background__shape screen__background__shape3"></span>
                <span class="screen__background__shape screen__background__shape2"></span>
                <span class="screen__background__shape screen__background__shape1"></span>
            </div>
        </div>
    </div>



















<LoadingComponent IsLoading="IsLoading" />

@code {

    public LoginDtoRequest LoginDtoRequest { get; set; } = new();

    public bool IsLoading { get; set; }

    private async Task ValidLogin()
    {
        try
        {
            IsLoading = true; //Mostrara el spinner de carga
            var response = await HttpClient.PostAsJsonAsync("api/Usuarios/Login", LoginDtoRequest);

            response.EnsureSuccessStatusCode();

            var auth = (AuthenticacionService)AuthenticationStateProvider;
            var loginResponse = await response.Content.ReadFromJsonAsync<LoginDtoResponse>();

            if (loginResponse!.Exito == false)
            {
                ToastService.ShowWarning(loginResponse.MensajeError!);
            }
            else
            {
                await auth.Autenticar(loginResponse);
                NavigationManager.NavigateTo("/");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError(ex.Message);
        }
        finally
        {
            IsLoading = false;
        }
    }
}