@page "/productos/edit/{id:int}"
@inject HttpClient Http
@inject NavigationManager NavigationManager

<div class="container mr-5 ml-5">
    @if (ProductoModificado.Id == 0)
    {
        <p>Cargando...</p>
    }
    else
    {
        <ProductoEditPage onGrabar="Actualizar"
                          Categorias="Categorias"
                          Marcas="Marcas"
                          Proveedores="Proveedores"
                          UnidadMedidas="UnidadMedidas"
                          Request="ProductoModificado"
                          Titulo="Actualizar Producto">
        </ProductoEditPage>
    }
</div>





@code {
    [Parameter]
    public int id { get; set; }
    public ProductoDtoRequest ProductoModificado { get; set; } = new();
    protected override async Task OnParametersSetAsync()
    {
        var response = await Http.GetFromJsonAsync<ProductoDtoRequest>($"api/productos/{id}");
        if(response != null)
        {
            ProductoModificado = response;
        }
    }

    private async Task Actualizar()
    {
        await Http.PutAsJsonAsync($"api/productos/{id}", ProductoModificado);
        NavigationManager.NavigateTo("productos/list");
    }

    public ICollection<CategoriaDto>? Categorias { get; set; } = new List<CategoriaDto>();
    public ICollection<MarcaDto>? Marcas { get; set; } = new List<MarcaDto>();
    public ICollection<ProveedorDto>? Proveedores { get; set; } = new List<ProveedorDto>();
    public ICollection<UnidadMedidaDto>? UnidadMedidas { get; set; } = new List<UnidadMedidaDto>();

    protected override async Task OnInitializedAsync()
    {
        Categorias = await Http.GetFromJsonAsync<ICollection<CategoriaDto>>("api/categorias");
        Marcas = await Http.GetFromJsonAsync<ICollection<MarcaDto>>("api/marcas");
        Proveedores = await Http.GetFromJsonAsync<ICollection<ProveedorDto>>("api/proveedores");
        UnidadMedidas = await Http.GetFromJsonAsync<ICollection<UnidadMedidaDto>>("api/unidadmedidas");

    }
}
