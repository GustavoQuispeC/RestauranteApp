@page "/marcas/list"
@using RestauranteApp.Shared
@inject HttpClient Http
@inject NavigationManager NavigationManager

<h3>Marca</h3>
<hr />
<a href="marcas/crear" class="btn btn-success">Nuevo <Icon Name="IconName.PinAngleFill" /></a>
<br />
<br />


@if (_marcas == null)
{
    <p><em>Cargando...</em></p>
}
else
{
    <table class="table table-hover table-bordered table-striped">
        <thead class="color-font">
            <tr>
                <th>Id:</th>
                <th>Descripcion:</th>
                <th>Observacion:</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in _marcas)
            {
                <tr>
                    <td>@item.Id</td>
                    <td>@item.Nombre</td>
                    <td>@item.Observacion</td>
                    <td>
                        <Button Class="colorEditar" @onclick="()=>Editar(item.Id)"><Icon Name="IconName.PenFill" /></Button>
                        <Button Class="colorEliminar" @onclick="()=>Eliminar(item.Id)"><Icon Name="IconName.TrashFill" /></Button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

}


@code {
    private MarcaDto[]? _marcas;
    protected override async Task OnInitializedAsync()
    {
        await Cargar();
    }
    private async Task Cargar()
    {
        _marcas = await Http.GetFromJsonAsync<MarcaDto[]>("api/marcas");
    }
    private void Editar(int id)
    {
        NavigationManager.NavigateTo($"marcas/editar/{id}");
    }
    private async void Eliminar(int id)
    {
        await Http.DeleteAsync($"api/marcas/{id}");
        await Cargar();
    }
}
