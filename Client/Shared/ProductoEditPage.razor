
@inject IToastService ToastService


<h3>@Titulo</h3>
<EditForm Model="Request" OnValidSubmit="Grabar">
    <DataAnnotationsValidator/>
    <div class="row row-cols-1 row-cols-md-2">
        <div class="col>">
            <div class="mb-3 row">
                <label class="form-label" form="Nombre">Nombre:</label>
                <input type="text" id="Nombre" class="form-control" @bind-value="Request.Nombre"/>
                <ValidationMessage For="() => Request.Nombre" />
            </div>
            <div class="mb-3 row">
                <label class="form-label" form="PrecioVenta">Precio Venta:</label>
                <InputNumber id="PrecioVenta" class="form-control" @bind-Value="Request.PrecioVenta" />
                <ValidationMessage For="() => Request.PrecioVenta" />
            </div>
            <div class="mb-3 row">
                <label class="form-label" form="PrecioCompra">Precio Compra:</label>
                <InputNumber id="PrecioCompra" class="form-control" @bind-Value="Request.PrecioCompra" />
                <ValidationMessage For="() => Request.PrecioCompra" />
                
            </div>
            <div class="mb-3 row">
                <label class="form-label" form="Stock">Stock:</label>
                <input type="number" id="Stock" class="form-control" @bind-value="Request.Stock" />
               <ValidationMessage For="() => Request.Stock" />
            </div>
            <div class="mb-3 row">
                <label class="form-label" form="FechaVencimiento">F.Vencimiento:</label>
                <input type="date" id="FechaVencimiento" class="form-control" @bind-value="Request.FechaVencimiento" />
            </div>
            <div class="mb-3 row">
                <label class="form-label" form="Observacion">Observación:</label>
                <input type="text" id="Observacion" class="form-control" @bind-value="Request.Observacion" />
            </div>
            <div class="mb-3 row">
                <label class="form-label" form="Categoria">Categoria:</label>
                <select id="Categoria" class="form-select" @bind="@Request.CategoriaId">
                    <option value="">Seleccione una categoría </option>
                    @foreach (var item in Categorias)
                    {
                        <option value="@item.Id">@item.Nombre</option>
                    }
                </select>
            </div>
            <div class="mb-3 row">
                <label class="form-label" form="Marca">Marca:</label>
                <select id="Marca" class="form-select" @bind="@Request.MarcaId">
                    <option value="">Seleccione una marca </option>
                    @foreach (var item in Marcas)
                    {
                        <option value="@item.Id">@item.Nombre</option>
                    }
                </select>
            </div>
            <div class="mb-3 row">
                <label class="form-label" form="Proveedor">Proveedor:</label>
                <select id="Proveedor" class="form-select" @bind="@Request.ProveedorId">
                    <option value="">Seleccione un proveedor </option>
                    @foreach (var item in Proveedores)
                    {
                        <option value="@item.Id">@item.RazonSocial</option>
                    }
                </select>
            </div>
            <div class="mb-3 row">
                <label class="form-label" form="UnidadMedida">Unidad Medida:</label>
                <select id="UnidadMedida" class="form-select" @bind="@Request.UnidadMedidaId">
                    <option value="">Seleccione unidad de medida </option>
                    @foreach (var item in UnidadMedidas)
                    {
                        <option value="@item.Id">@item.Nombre</option>
                    }
                </select>
            </div>

            <div class="col mt-5 mb-5">
            <div class="card">
                <div class="card-body text-center">
                    @if (Request.Base64Imagen is not null)
                    {
                        <div style="margin: 10px">
                            <img src="data:image/jpeg;base64, @Request.Base64Imagen" alt="@Request.Nombre" style="width:200px" />
                        </div>
                    }
                    else
                    {
                        <img src="@Request.UrlImagen" alt="@Request.Nombre" style="width: 200px" />
                    }
                </div>
                <div class="card-footer bg-success-subtle">
                    <InputFile accept="image/png, image/jpeg, image/webp" style="display: none" 
                    OnChange="OnFileUploaded" id="file" />
                    <label for="file" class="btn btn-secondary"><i class="bi bi-upload me-1"></i>Subir imagen</label>
                </div>
            </div>



            </div>


        </div>

    </div>
    <div class="row row-cols-5">
        <div class=" col">
            <button type="submit" Class="btn btn-success">@TextoBoton <i class="bi bi-floppy"></i></button>
        </div>
        <div class=" col">
            <button type="reset" Class="btn btn-warning"><i class="bi bi-stars"></i>Limpiar</button>
        </div>
       
       
    </div>
    @* <ValidationSummary></ValidationSummary> *@

</EditForm>


@code {
    [Parameter]
    public ProductoDtoRequest Request { get; set; } = new();
    [Parameter]
    public EventCallback onGrabar { get; set; }
    [Parameter]
    public string Titulo { get; set; } = string.Empty;

    [Parameter]
    public ICollection<CategoriaDto> Categorias { get; set; } = new List<CategoriaDto>();

    [Parameter]
    public ICollection<MarcaDto> Marcas { get; set; } = new List<MarcaDto>();

    [Parameter]
    public ICollection<ProveedorDto> Proveedores { get; set; } = new List<ProveedorDto>();

    [Parameter]
    public ICollection<UnidadMedidaDto> UnidadMedidas { get; set; } = new List<UnidadMedidaDto>();

    public string TextoBoton { get; set; } = "Crear";
    private void Grabar()
    {
        onGrabar.InvokeAsync();
    }
    protected override void OnInitialized()
    {
        TextoBoton = Request.Id == 0 ? "Crear" : "Actualizar";
    }

    private async Task OnFileUploaded(InputFileChangeEventArgs e)
    {
        try
        {
            var imagen = e.File;
            var buffer = new byte[imagen.Size];
            var _ = await imagen.OpenReadStream().ReadAsync(buffer); // Extrae el base64

            Request.Base64Imagen = Convert.ToBase64String(buffer);
            Request.FileName = imagen.Name;
            Request.UrlImagen = null;
        }
        catch (Exception ex)
        {
            ToastService.ShowError(ex.Message);
        }
    }
}
